{"mappings":";AAaA;IACE,QAAQ,KAAK,CAAC;IAEd,YAAY,EAAE,OAAO,KAAK,CAAC;IAC3B,OAAO,EAAE,KAAK,GAAG,SAAS,CAAC;IAC3B,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACjB,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,GAAG,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;CACrD;AACD;IACE,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;CAC1B;AACD;IACE,OAAO,EAAE,OAAO,OAAO,CAAC;CAEzB;AACD,yBAAyB;IACvB,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC;IACtB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,QAAQ,CAAC,EAAE,eAAgB,CAAC;IAC5B,kBAAkB,CAAC,EAAE,yBAA0B,CAAC;IAChD,QAAQ,CAAC,EAAE,OAAO,OAAO,CAAC;CAC3B,CAAC;AACF,uBAAuB,EACrB,MAAgB,EAChB,UAAwB,EACxB,QAAoB,EACpB,kBAAwC,EACxC,QAAoB,GACrB,GAAE,UAAe,GAAG,YAAY,CA6LhC","sources":["zone2-core/zone2-core/index.ts","zone2-core/index.ts"],"sourcesContent":[null,"import {\n  _Proxy as _Proxy_,\n  _Reflect as _Reflect_,\n  snapshot,\n  _WeakMap as _WeakMap_,\n  _WeakMap_prototype as _WeakMap_prototype_,\n} from \"@portal-solutions/hooker-core\";\nconst { isFrozen } = Object;\nfunction trySet<T, K extends keyof T>(obj: T, key: K, val: T[K]): T[K] {\n  if (!isFrozen(obj)) obj[key] = val;\n  return val;\n}\nconst globalThis_: typeof globalThis = globalThis;\nexport interface ZoneProvider {\n  new (): IZone;\n  // awareProxy: typeof Proxy;\n  unawareProxy: typeof Proxy;\n  current: IZone | undefined;\n  hook<T>(a: T): T;\n  enter<T>(zone: IZone | undefined, func: () => T): T;\n}\nexport interface IZone {\n  enter<T>(fn: () => T): T;\n}\nexport interface Global {\n  Promise: typeof Promise;\n  // Proxy: typeof Proxy;\n}\nexport type CreateOpts = {\n  _Proxy?: typeof Proxy;\n  globalThis?: Global;\n  _WeakMap?: typeof _WeakMap_;\n  _WeakMap_prototype?: typeof _WeakMap_prototype_;\n  _Reflect?: typeof Reflect;\n};\nexport function create({\n  _Proxy = _Proxy_,\n  globalThis = globalThis_,\n  _WeakMap = _WeakMap_,\n  _WeakMap_prototype = _WeakMap_prototype_,\n  _Reflect = _Reflect_,\n}: CreateOpts = {}): ZoneProvider {\n  return class Zone implements IZone {\n    static #current: Zone | undefined = undefined;\n    static get current() {\n      return this.#current;\n    }\n    static #setCurrent(targetZone: Zone | undefined) {\n      this.#current = targetZone;\n      while (\n        targetZone &&\n        _WeakMap_prototype.has(this.#conflictResolver, targetZone)\n      ) {\n        const x = _WeakMap_prototype.get(this.#conflictResolver, targetZone);\n        _WeakMap_prototype.remove(this.#conflictResolver, targetZone);\n        x();\n      }\n      while (targetZone === undefined && this.#undefinedConflictResolver) {\n        const old = this.#undefinedConflictResolver;\n        this.#undefinedConflictResolver = undefined;\n        old();\n      }\n    }\n    static #savedPromise: typeof Promise = globalThis.Promise;\n    static #conflictResolver: WeakMap<Zone, () => void> = new _WeakMap();\n    static #proxyMap: WeakMap<any, any> = new _WeakMap();\n    #proxyMapInstance: WeakMap<any, any> = new _WeakMap();\n    static #proxyMapFor(zone: Zone | undefined): WeakMap<any, any> {\n      if (zone === undefined) {\n        return Zone.#proxyMap;\n      }\n      return zone.#proxyMapInstance;\n    }\n    static get #currentProxyMap() {\n      return Zone.#proxyMapFor(Zone.#current);\n    }\n    static #undefinedConflictResolver: (() => void) | undefined = undefined;\n    static #hookedPromise: typeof Promise = trySet(\n      globalThis,\n      \"Promise\",\n      new _Proxy(this.#savedPromise, {\n        apply(target, thisArg, argArray) {\n          if (argArray.length) argArray[0] = Zone.#hook(argArray[0]);\n          return _Reflect.apply(target, thisArg, argArray);\n        },\n        construct(target, argArray, thisArg) {\n          if (argArray.length) argArray[0] = Zone.#hook(argArray[0]);\n          return _Reflect.construct(target, argArray, thisArg);\n        },\n      })\n    );\n    // static #hookedProxy: typeof Proxy = trySet(globalThis, 'Proxy', new _Proxy(globalThis.Proxy, {\n    //     construct(target, argArray, thisArg) {\n    //         if (argArray.length >= 2) argArray[1] = {\n    //             ...new _Proxy(argArray[1], {\n    //                 get(object, key) {\n    //                     return Zone.#hook(_Reflect.get(object, key));\n    //                 }\n    //             })\n    //         };\n    //         return _Reflect.construct(target, argArray, thisArg);\n    //     }\n    // }));\n    // static get awareProxy() {\n    //     return this.#hookedProxy;\n    // }\n    static get unawareProxy() {\n      return _Proxy;\n    }\n    static #savedPromiseFinally = snapshot(\n      this.#hookedPromise.prototype.finally\n    );\n    static #enter<T>(\n      zone: Zone | undefined,\n      func: () => T,\n      type: \"generic\" = \"generic\"\n    ): T {\n      const old = Zone.#current;\n      Zone.#setCurrent(zone);\n      let disable = false;\n      try {\n        let value = func();\n        if (value instanceof Zone.#hookedPromise) {\n          disable = true;\n          const resolve = () => {\n            if (Zone.#current === zone) {\n              Zone.#setCurrent(old);\n              return;\n            }\n            if (zone === undefined) {\n              Zone.#undefinedConflictResolver = () => resolve();\n            } else {\n              _WeakMap_prototype.set(Zone.#conflictResolver, zone, resolve);\n            }\n          };\n          value = Zone.#savedPromiseFinally(value, resolve);\n        }\n        return value;\n      } finally {\n        if (!disable) {\n          Zone.#setCurrent(old);\n        }\n      }\n    }\n    static enter<T>(zone: IZone | undefined, func: () => T): T {\n      if (zone !== undefined && !(zone instanceof Zone))\n        return zone.enter(func);\n      return Zone.#enter(zone as Zone | undefined, func);\n    }\n    enter<T>(func: () => T): T {\n      return Zone.#enter(this, func);\n    }\n    static #hook<T>(object: T, type: \"generic\" = \"generic\"): T {\n      const snap = this.#current;\n      if (typeof object === \"function\") {\n        const old = object;\n        object = new _Proxy(object, {\n          apply(target, thisArg, argArray) {\n            return Zone.#enter(\n              snap,\n              () => _Reflect.apply(target, thisArg, argArray),\n              type\n            );\n          },\n        });\n        // if (snap === undefined) {\n        _WeakMap_prototype.set(Zone.#currentProxyMap, old, object);\n      }\n      return object;\n    }\n    static hook<T>(object: T): T {\n      return this.#hook(object);\n    }\n    static {\n      for (const promiseKey of [\"then\", \"catch\", \"finally\"]) {\n        trySet(\n          this.#hookedPromise.prototype,\n          promiseKey as any,\n          new _Proxy(this.#hookedPromise.prototype[promiseKey], {\n            apply(target, thisArg, argArray) {\n              for (let i = 0; i < argArray.length; i++)\n                argArray[i] = Zone.#hook(argArray[i]);\n              return _Reflect.apply(target, thisArg, argArray);\n            },\n          })\n        );\n      }\n      if (\n        \"EventTarget\" in globalThis &&\n        typeof globalThis.EventTarget === \"object\" &&\n        \"prototype\" in globalThis.EventTarget &&\n        typeof globalThis.EventTarget.prototype === \"object\" &&\n        \"addEventListener\" in globalThis.EventTarget.prototype &&\n        \"removeEventListener\" in globalThis.EventTarget.prototype &&\n        typeof globalThis.EventTarget.prototype.addEventListener ===\n          \"function\" &&\n        typeof globalThis.EventTarget.prototype.removeEventListener ===\n          \"function\"\n      ) {\n        trySet(\n          globalThis.EventTarget.prototype,\n          \"addEventListener\",\n          new _Proxy(globalThis.EventTarget.prototype.addEventListener, {\n            apply(target, thisArg, argArray) {\n              for (let i = 0; i < argArray.length; i++)\n                argArray[i] = Zone.#hook(argArray[i]);\n              return _Reflect.apply(target, thisArg, argArray);\n            },\n          })\n        );\n        trySet(\n          globalThis.EventTarget.prototype,\n          \"removeEventListener\",\n          new _Proxy(globalThis.EventTarget.prototype.removeEventListener, {\n            apply(target, thisArg, argArray) {\n              for (let i = 0; i < argArray.length; i++)\n                if (typeof argArray[i] === \"function\")\n                  argArray[i] =\n                    _WeakMap_prototype.get(\n                      Zone.#currentProxyMap,\n                      argArray[i]\n                    ) ?? argArray[i];\n              return _Reflect.apply(target, thisArg, argArray);\n            },\n          })\n        );\n      }\n    }\n    constructor() {}\n  };\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}