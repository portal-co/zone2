{"mappings":"AAaA;IACE,QAAQ,KAAK,CAAC;IAEd,YAAY,EAAE,OAAO,KAAK,CAAC;IAC3B,OAAO,EAAE,KAAK,GAAG,SAAS,CAAC;IAC3B,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;CAClB;AACD;CAAyB;AACzB;IACE,OAAO,EAAE,OAAO,OAAO,CAAC;CAEzB;AACD,uBAAuB,EACrB,MAAgB,EAChB,UAAwB,GACzB,EAAE;IACD,MAAM,CAAC,EAAE,OAAO,KAAK,CAAC;IACtB,UAAU,EAAE,MAAM,CAAC;CACpB,GAAG,YAAY,CAiIf","sources":["zone2-core/zone2-core/index.ts","zone2-core/index.ts"],"sourcesContent":[null,"import {\n  _Proxy as _Proxy_,\n  _Reflect,\n  snapshot,\n  _WeakMap,\n  _WeakMap_prototype,\n} from \"@portal-solutions/hooker-core\";\nconst { isFrozen } = Object;\nfunction trySet<T, K extends keyof T>(obj: T, key: K, val: T[K]): T[K] {\n  if (!isFrozen(obj)) obj[key] = val;\n  return val;\n}\nconst globalThis_: typeof globalThis = globalThis;\nexport interface ZoneProvider {\n  new (): IZone;\n  // awareProxy: typeof Proxy;\n  unawareProxy: typeof Proxy;\n  current: IZone | undefined;\n  hook<T>(a: T): T;\n}\nexport interface IZone {}\nexport interface Global {\n  Promise: typeof Promise;\n  // Proxy: typeof Proxy;\n}\nexport function create({\n  _Proxy = _Proxy_,\n  globalThis = globalThis_,\n}: {\n  _Proxy?: typeof Proxy;\n  globalThis: Global;\n}): ZoneProvider {\n  return class Zone implements IZone {\n    static #current: Zone | undefined = undefined;\n    static get current() {\n      return this.#current;\n    }\n    static #setCurrent(a: Zone | undefined) {\n      this.#current = a;\n      while (a && _WeakMap_prototype.has(this.#conflictResolver, a)) {\n        _WeakMap_prototype.get(this.#conflictResolver, a)();\n        _WeakMap_prototype.remove(this.#conflictResolver, a);\n      }\n      while (a === undefined && this.#undefinedConflictResolver) {\n        const old = this.#undefinedConflictResolver;\n        this.#undefinedConflictResolver = undefined;\n        old();\n      }\n    }\n    static #savedPromise: typeof Promise = globalThis.Promise;\n    static #conflictResolver: WeakMap<Zone, () => void> = new _WeakMap();\n    static #undefinedConflictResolver: (() => void) | undefined = undefined;\n    static #hookedPromise: typeof Promise = trySet(\n      globalThis,\n      \"Promise\",\n      new _Proxy(this.#savedPromise, {\n        apply(target, thisArg, argArray) {\n          if (argArray.length) argArray[0] = Zone.#hook(argArray[0]);\n          return _Reflect.apply(target, thisArg, argArray);\n        },\n        construct(target, argArray, thisArg) {\n          if (argArray.length) argArray[0] = Zone.#hook(argArray[0]);\n          return _Reflect.construct(target, argArray, thisArg);\n        },\n      })\n    );\n    // static #hookedProxy: typeof Proxy = trySet(globalThis, 'Proxy', new _Proxy(globalThis.Proxy, {\n    //     construct(target, argArray, thisArg) {\n    //         if (argArray.length >= 2) argArray[1] = {\n    //             ...new _Proxy(argArray[1], {\n    //                 get(object, key) {\n    //                     return Zone.#hook(_Reflect.get(object, key));\n    //                 }\n    //             })\n    //         };\n    //         return _Reflect.construct(target, argArray, thisArg);\n    //     }\n    // }));\n    // static get awareProxy() {\n    //     return this.#hookedProxy;\n    // }\n    static get unawareProxy() {\n      return _Proxy;\n    }\n    static #savedPromiseFinally = snapshot(\n      this.#hookedPromise.prototype.finally\n    );\n    static #hook<T>(object: T): T {\n      const snap = this.#current;\n      if (typeof object === \"function\")\n        object = new _Proxy(object, {\n          apply(target, thisArg, argArray) {\n            const old = Zone.#current;\n            Zone.#setCurrent(snap);\n            let disable = false;\n            try {\n              let value = _Reflect.apply(target, thisArg, argArray);\n              if (value instanceof Zone.#hookedPromise) {\n                disable = true;\n                value = Zone.#savedPromiseFinally(\n                  value,\n                  ((async_impl) => () => {\n                    if (Zone.#current === snap) {\n                      Zone.#setCurrent(old);\n                      return;\n                    }\n                    async_impl();\n                  })(async () => {\n                    for (;;) {\n                      if (Zone.#current === snap) {\n                        Zone.#setCurrent(old);\n                        return;\n                      } else {\n                        await new Zone.#savedPromise((resolve) => {\n                          if (snap === undefined) {\n                            Zone.#undefinedConflictResolver = () =>\n                              resolve(undefined);\n                          } else {\n                            _WeakMap_prototype.set(\n                              Zone.#conflictResolver,\n                              snap,\n                              resolve\n                            );\n                          }\n                        });\n                      }\n                    }\n                  })\n                );\n              }\n              return value;\n            } finally {\n              if (!disable) {\n                Zone.#setCurrent(old);\n              }\n            }\n          },\n        });\n      return object;\n    }\n    static hook<T>(object: T): T {\n      return this.#hook(object);\n    }\n    static {\n      for (const promiseKey of [\"then\", \"catch\", \"finally\"]) {\n        trySet(\n          this.#hookedPromise.prototype,\n          promiseKey as any,\n          new _Proxy(this.#hookedPromise.prototype[promiseKey], {\n            apply(target, thisArg, argArray) {\n              for (let i = 0; i < argArray.length; i++)\n                argArray[i] = Zone.#hook(argArray[i]);\n              return _Reflect.apply(target, thisArg, argArray);\n            },\n          })\n        );\n      }\n    }\n    constructor() {}\n  };\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}